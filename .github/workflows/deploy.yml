name: Deploy Chat App to Google Cloud

on:
  push:
    branches:
      - master  # Change from 'main' to 'master'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH for GCP VM
        run: |
          mkdir -p ~/.ssh
          # Save the private key from GitHub secrets
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Add host key checking
          echo "Host ${{ secrets.GCP_HOST }}" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "  PubkeyAcceptedKeyTypes +ssh-rsa" >> ~/.ssh/config
          echo "  HostKeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          # Verify SSH key format
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Invalid SSH key format"
          # Display debug info
          echo "Using identity file: ~/.ssh/id_rsa"
          echo "Connecting to: ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}"
          # Display public key for verification
          echo "Public key fingerprint:"
          ssh-keygen -y -f ~/.ssh/id_rsa | ssh-keygen -E md5 -lf -

      - name: Clean old app on VM
        run: |
          # Add debug information
          echo "Connecting to ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}"
          # Try SSH connection with verbose output
          ssh -v -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "rm -rf ~/chat-app && mkdir ~/chat-app"

      - name: Copy code to VM
        run: |
          scp -v -r -i ~/.ssh/id_rsa ./* ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:~/chat-app

      - name: Run Docker Compose on VM
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} << 'EOF'
            cd ~/chat-app
            # Set environment variables for database connection and OAuth2
            export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

            # Clean up any existing containers and volumes
            docker-compose down -v

            # Run docker-compose with environment variables
            docker-compose -f docker-compose.yml up -d
          EOF

      - name: Remove Frontend and Backend Docker Images
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} << 'EOF'
            cd ~/chat-app
            # Remove frontend and backend Docker images while keeping the containers running
            docker image rm -f chat-app_frontend chat-app_backend
          EOF
