version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: chat-app-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-chatapp}
      MYSQL_USER: ${MYSQL_USER:-chatuser}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-chatpassword}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: chat-app-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - chat-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: chat-app-kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Modified for better network compatibility
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # Explicit host mapping
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      # Add explicit host name settings
      KAFKA_HOST_NAME: kafka
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat-app-backend
    hostname: backend
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL:-jdbc:mysql://mysql:3306/chatapp}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME:-root}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD:-rootpassword}
      # Modified Kafka configuration for better connectivity
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PROPERTIES_RECONNECT_BACKOFF_MS: 1000
      SPRING_KAFKA_PROPERTIES_RECONNECT_BACKOFF_MAX_MS: 5000
      SPRING_KAFKA_PROPERTIES_REQUEST_TIMEOUT_MS: 30000
      SPRING_PROFILES_ACTIVE: docker
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-"*"}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      # Add explicit host mapping for Kafka
      KAFKA_HOST: kafka
      # Add extra DNS configuration
      EXTRA_HOSTS: "kafka:172.20.0.3"
    networks:
      - chat-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 0"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s
    extra_hosts:
      - "kafka:172.20.0.3"

  # Frontend Angular Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat-app-frontend
    hostname: frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
    environment:
      - API_URL=http://backend:8080
    networks:
      - chat-network
    restart: on-failure

networks:
  chat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data: